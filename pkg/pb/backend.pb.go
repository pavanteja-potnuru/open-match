// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.10.1
// source: api/backend.proto

package pb

import (
	context "context"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FunctionConfig_Type int32

const (
	FunctionConfig_GRPC FunctionConfig_Type = 0
	FunctionConfig_REST FunctionConfig_Type = 1
)

// Enum value maps for FunctionConfig_Type.
var (
	FunctionConfig_Type_name = map[int32]string{
		0: "GRPC",
		1: "REST",
	}
	FunctionConfig_Type_value = map[string]int32{
		"GRPC": 0,
		"REST": 1,
	}
)

func (x FunctionConfig_Type) Enum() *FunctionConfig_Type {
	p := new(FunctionConfig_Type)
	*p = x
	return p
}

func (x FunctionConfig_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FunctionConfig_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_api_backend_proto_enumTypes[0].Descriptor()
}

func (FunctionConfig_Type) Type() protoreflect.EnumType {
	return &file_api_backend_proto_enumTypes[0]
}

func (x FunctionConfig_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FunctionConfig_Type.Descriptor instead.
func (FunctionConfig_Type) EnumDescriptor() ([]byte, []int) {
	return file_api_backend_proto_rawDescGZIP(), []int{0, 0}
}

type AssignmentFailure_Cause int32

const (
	AssignmentFailure_UNKNOWN          AssignmentFailure_Cause = 0
	AssignmentFailure_TICKET_NOT_FOUND AssignmentFailure_Cause = 1
)

// Enum value maps for AssignmentFailure_Cause.
var (
	AssignmentFailure_Cause_name = map[int32]string{
		0: "UNKNOWN",
		1: "TICKET_NOT_FOUND",
	}
	AssignmentFailure_Cause_value = map[string]int32{
		"UNKNOWN":          0,
		"TICKET_NOT_FOUND": 1,
	}
)

func (x AssignmentFailure_Cause) Enum() *AssignmentFailure_Cause {
	p := new(AssignmentFailure_Cause)
	*p = x
	return p
}

func (x AssignmentFailure_Cause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssignmentFailure_Cause) Descriptor() protoreflect.EnumDescriptor {
	return file_api_backend_proto_enumTypes[1].Descriptor()
}

func (AssignmentFailure_Cause) Type() protoreflect.EnumType {
	return &file_api_backend_proto_enumTypes[1]
}

func (x AssignmentFailure_Cause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssignmentFailure_Cause.Descriptor instead.
func (AssignmentFailure_Cause) EnumDescriptor() ([]byte, []int) {
	return file_api_backend_proto_rawDescGZIP(), []int{8, 0}
}

// FunctionConfig specifies a MMF address and client type for Backend to establish connections with the MMF
type FunctionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string              `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port int32               `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Type FunctionConfig_Type `protobuf:"varint,3,opt,name=type,proto3,enum=openmatch.FunctionConfig_Type" json:"type,omitempty"`
}

func (x *FunctionConfig) Reset() {
	*x = FunctionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_backend_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionConfig) ProtoMessage() {}

func (x *FunctionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_backend_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionConfig.ProtoReflect.Descriptor instead.
func (*FunctionConfig) Descriptor() ([]byte, []int) {
	return file_api_backend_proto_rawDescGZIP(), []int{0}
}

func (x *FunctionConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *FunctionConfig) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *FunctionConfig) GetType() FunctionConfig_Type {
	if x != nil {
		return x.Type
	}
	return FunctionConfig_GRPC
}

type FetchMatchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A configuration for the MatchFunction server of this FetchMatches call.
	Config *FunctionConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// A MatchProfile that will be sent to the MatchFunction server of this FetchMatches call.
	Profile *MatchProfile `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *FetchMatchesRequest) Reset() {
	*x = FetchMatchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_backend_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchMatchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMatchesRequest) ProtoMessage() {}

func (x *FetchMatchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_backend_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMatchesRequest.ProtoReflect.Descriptor instead.
func (*FetchMatchesRequest) Descriptor() ([]byte, []int) {
	return file_api_backend_proto_rawDescGZIP(), []int{1}
}

func (x *FetchMatchesRequest) GetConfig() *FunctionConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *FetchMatchesRequest) GetProfile() *MatchProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

type FetchMatchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A Match generated by the user-defined MMF with the specified MatchProfiles.
	// A valid Match response will contain at least one ticket.
	Match *Match `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
}

func (x *FetchMatchesResponse) Reset() {
	*x = FetchMatchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_backend_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchMatchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMatchesResponse) ProtoMessage() {}

func (x *FetchMatchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_backend_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMatchesResponse.ProtoReflect.Descriptor instead.
func (*FetchMatchesResponse) Descriptor() ([]byte, []int) {
	return file_api_backend_proto_rawDescGZIP(), []int{2}
}

func (x *FetchMatchesResponse) GetMatch() *Match {
	if x != nil {
		return x.Match
	}
	return nil
}

type ReleaseTicketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TicketIds is a list of string representing Open Match generated Ids to be re-enabled for MMF querying
	// because they are no longer awaiting assignment from a previous match result
	TicketIds []string `protobuf:"bytes,1,rep,name=ticket_ids,json=ticketIds,proto3" json:"ticket_ids,omitempty"`
}

func (x *ReleaseTicketsRequest) Reset() {
	*x = ReleaseTicketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_backend_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseTicketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseTicketsRequest) ProtoMessage() {}

func (x *ReleaseTicketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_backend_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseTicketsRequest.ProtoReflect.Descriptor instead.
func (*ReleaseTicketsRequest) Descriptor() ([]byte, []int) {
	return file_api_backend_proto_rawDescGZIP(), []int{3}
}

func (x *ReleaseTicketsRequest) GetTicketIds() []string {
	if x != nil {
		return x.TicketIds
	}
	return nil
}

type ReleaseTicketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReleaseTicketsResponse) Reset() {
	*x = ReleaseTicketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_backend_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseTicketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseTicketsResponse) ProtoMessage() {}

func (x *ReleaseTicketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_backend_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseTicketsResponse.ProtoReflect.Descriptor instead.
func (*ReleaseTicketsResponse) Descriptor() ([]byte, []int) {
	return file_api_backend_proto_rawDescGZIP(), []int{4}
}

type ReleaseAllTicketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReleaseAllTicketsRequest) Reset() {
	*x = ReleaseAllTicketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_backend_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseAllTicketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseAllTicketsRequest) ProtoMessage() {}

func (x *ReleaseAllTicketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_backend_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseAllTicketsRequest.ProtoReflect.Descriptor instead.
func (*ReleaseAllTicketsRequest) Descriptor() ([]byte, []int) {
	return file_api_backend_proto_rawDescGZIP(), []int{5}
}

type ReleaseAllTicketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReleaseAllTicketsResponse) Reset() {
	*x = ReleaseAllTicketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_backend_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseAllTicketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseAllTicketsResponse) ProtoMessage() {}

func (x *ReleaseAllTicketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_backend_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseAllTicketsResponse.ProtoReflect.Descriptor instead.
func (*ReleaseAllTicketsResponse) Descriptor() ([]byte, []int) {
	return file_api_backend_proto_rawDescGZIP(), []int{6}
}

// AssignmentGroup contains an Assignment and the Tickets to which it should be applied.
type AssignmentGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TicketIds is a list of strings representing Open Match generated Ids which apply to an Assignment.
	TicketIds []string `protobuf:"bytes,1,rep,name=ticket_ids,json=ticketIds,proto3" json:"ticket_ids,omitempty"`
	// An Assignment specifies game connection related information to be associated with the TicketIds.
	Assignment *Assignment `protobuf:"bytes,2,opt,name=assignment,proto3" json:"assignment,omitempty"`
}

func (x *AssignmentGroup) Reset() {
	*x = AssignmentGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_backend_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignmentGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignmentGroup) ProtoMessage() {}

func (x *AssignmentGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_backend_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignmentGroup.ProtoReflect.Descriptor instead.
func (*AssignmentGroup) Descriptor() ([]byte, []int) {
	return file_api_backend_proto_rawDescGZIP(), []int{7}
}

func (x *AssignmentGroup) GetTicketIds() []string {
	if x != nil {
		return x.TicketIds
	}
	return nil
}

func (x *AssignmentGroup) GetAssignment() *Assignment {
	if x != nil {
		return x.Assignment
	}
	return nil
}

// AssignmentFailure contains the id of the Ticket that failed the Assignment and the failure status.
type AssignmentFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketId string                  `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	Cause    AssignmentFailure_Cause `protobuf:"varint,2,opt,name=cause,proto3,enum=openmatch.AssignmentFailure_Cause" json:"cause,omitempty"`
}

func (x *AssignmentFailure) Reset() {
	*x = AssignmentFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_backend_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignmentFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignmentFailure) ProtoMessage() {}

func (x *AssignmentFailure) ProtoReflect() protoreflect.Message {
	mi := &file_api_backend_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignmentFailure.ProtoReflect.Descriptor instead.
func (*AssignmentFailure) Descriptor() ([]byte, []int) {
	return file_api_backend_proto_rawDescGZIP(), []int{8}
}

func (x *AssignmentFailure) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

func (x *AssignmentFailure) GetCause() AssignmentFailure_Cause {
	if x != nil {
		return x.Cause
	}
	return AssignmentFailure_UNKNOWN
}

type AssignTicketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Assignments is a list of assignment groups that contain assignment and the Tickets to which they should be applied.
	Assignments []*AssignmentGroup `protobuf:"bytes,1,rep,name=assignments,proto3" json:"assignments,omitempty"`
}

func (x *AssignTicketsRequest) Reset() {
	*x = AssignTicketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_backend_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignTicketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignTicketsRequest) ProtoMessage() {}

func (x *AssignTicketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_backend_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignTicketsRequest.ProtoReflect.Descriptor instead.
func (*AssignTicketsRequest) Descriptor() ([]byte, []int) {
	return file_api_backend_proto_rawDescGZIP(), []int{9}
}

func (x *AssignTicketsRequest) GetAssignments() []*AssignmentGroup {
	if x != nil {
		return x.Assignments
	}
	return nil
}

type AssignTicketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Failures is a list of all the Tickets that failed assignment along with the cause of failure.
	Failures []*AssignmentFailure `protobuf:"bytes,1,rep,name=failures,proto3" json:"failures,omitempty"`
}

func (x *AssignTicketsResponse) Reset() {
	*x = AssignTicketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_backend_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignTicketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignTicketsResponse) ProtoMessage() {}

func (x *AssignTicketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_backend_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignTicketsResponse.ProtoReflect.Descriptor instead.
func (*AssignTicketsResponse) Descriptor() ([]byte, []int) {
	return file_api_backend_proto_rawDescGZIP(), []int{10}
}

func (x *AssignTicketsResponse) GetFailures() []*AssignmentFailure {
	if x != nil {
		return x.Failures
	}
	return nil
}

var File_api_backend_proto protoreflect.FileDescriptor

var file_api_backend_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x12,
	0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x88, 0x01, 0x0a, 0x0e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x1a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x52, 0x50, 0x43, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x53, 0x54, 0x10, 0x01, 0x22, 0x7b, 0x0a, 0x13, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x3e, 0x0a, 0x14, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x36, 0x0a, 0x15, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x73,
	0x22, 0x18, 0x0a, 0x16, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x41, 0x6c, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x67, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x96, 0x01, 0x0a,
	0x11, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x75,
	0x73, 0x65, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x22, 0x2a, 0x0a, 0x05, 0x43, 0x61, 0x75,
	0x73, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x54, 0x0a, 0x14, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x51, 0x0a, 0x15, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x32, 0xad,
	0x04, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x7e, 0x0a, 0x0c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x30,
	0x01, 0x12, 0x80, 0x01, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21,
	0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x3a, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x84, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x3a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x90, 0x01, 0x0a, 0x11,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x3a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x61, 0x6c, 0x6c, 0x3a, 0x01, 0x2a, 0x42, 0x8a,
	0x03, 0x5a, 0x20, 0x6f, 0x70, 0x65, 0x6e, 0x2d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x64, 0x65,
	0x76, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x70, 0x62, 0xaa, 0x02, 0x09, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x92,
	0x41, 0xd8, 0x02, 0x12, 0xb1, 0x01, 0x0a, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x22,
	0x49, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x20, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2d, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x64, 0x65, 0x76, 0x1a, 0x23, 0x6f, 0x70, 0x65, 0x6e, 0x2d, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x40, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2a, 0x56, 0x0a, 0x12, 0x41, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x20, 0x32, 0x2e, 0x30, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x12, 0x40, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x66, 0x6f, 0x72, 0x67, 0x61,
	0x6d, 0x65, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x62,
	0x6c, 0x6f, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e,
	0x53, 0x45, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x02, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x52,
	0x3b, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x34, 0x0a, 0x2a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x07, 0x72, 0x3d, 0x0a, 0x18,
	0x4f, 0x70, 0x65, 0x6e, 0x20, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x64, 0x65, 0x76,
	0x2f, 0x73, 0x69, 0x74, 0x65, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_api_backend_proto_rawDescOnce sync.Once
	file_api_backend_proto_rawDescData = file_api_backend_proto_rawDesc
)

func file_api_backend_proto_rawDescGZIP() []byte {
	file_api_backend_proto_rawDescOnce.Do(func() {
		file_api_backend_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_backend_proto_rawDescData)
	})
	return file_api_backend_proto_rawDescData
}

var file_api_backend_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_backend_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_api_backend_proto_goTypes = []interface{}{
	(FunctionConfig_Type)(0),          // 0: openmatch.FunctionConfig.Type
	(AssignmentFailure_Cause)(0),      // 1: openmatch.AssignmentFailure.Cause
	(*FunctionConfig)(nil),            // 2: openmatch.FunctionConfig
	(*FetchMatchesRequest)(nil),       // 3: openmatch.FetchMatchesRequest
	(*FetchMatchesResponse)(nil),      // 4: openmatch.FetchMatchesResponse
	(*ReleaseTicketsRequest)(nil),     // 5: openmatch.ReleaseTicketsRequest
	(*ReleaseTicketsResponse)(nil),    // 6: openmatch.ReleaseTicketsResponse
	(*ReleaseAllTicketsRequest)(nil),  // 7: openmatch.ReleaseAllTicketsRequest
	(*ReleaseAllTicketsResponse)(nil), // 8: openmatch.ReleaseAllTicketsResponse
	(*AssignmentGroup)(nil),           // 9: openmatch.AssignmentGroup
	(*AssignmentFailure)(nil),         // 10: openmatch.AssignmentFailure
	(*AssignTicketsRequest)(nil),      // 11: openmatch.AssignTicketsRequest
	(*AssignTicketsResponse)(nil),     // 12: openmatch.AssignTicketsResponse
	(*MatchProfile)(nil),              // 13: openmatch.MatchProfile
	(*Match)(nil),                     // 14: openmatch.Match
	(*Assignment)(nil),                // 15: openmatch.Assignment
}
var file_api_backend_proto_depIdxs = []int32{
	0,  // 0: openmatch.FunctionConfig.type:type_name -> openmatch.FunctionConfig.Type
	2,  // 1: openmatch.FetchMatchesRequest.config:type_name -> openmatch.FunctionConfig
	13, // 2: openmatch.FetchMatchesRequest.profile:type_name -> openmatch.MatchProfile
	14, // 3: openmatch.FetchMatchesResponse.match:type_name -> openmatch.Match
	15, // 4: openmatch.AssignmentGroup.assignment:type_name -> openmatch.Assignment
	1,  // 5: openmatch.AssignmentFailure.cause:type_name -> openmatch.AssignmentFailure.Cause
	9,  // 6: openmatch.AssignTicketsRequest.assignments:type_name -> openmatch.AssignmentGroup
	10, // 7: openmatch.AssignTicketsResponse.failures:type_name -> openmatch.AssignmentFailure
	3,  // 8: openmatch.BackendService.FetchMatches:input_type -> openmatch.FetchMatchesRequest
	11, // 9: openmatch.BackendService.AssignTickets:input_type -> openmatch.AssignTicketsRequest
	5,  // 10: openmatch.BackendService.ReleaseTickets:input_type -> openmatch.ReleaseTicketsRequest
	7,  // 11: openmatch.BackendService.ReleaseAllTickets:input_type -> openmatch.ReleaseAllTicketsRequest
	4,  // 12: openmatch.BackendService.FetchMatches:output_type -> openmatch.FetchMatchesResponse
	12, // 13: openmatch.BackendService.AssignTickets:output_type -> openmatch.AssignTicketsResponse
	6,  // 14: openmatch.BackendService.ReleaseTickets:output_type -> openmatch.ReleaseTicketsResponse
	8,  // 15: openmatch.BackendService.ReleaseAllTickets:output_type -> openmatch.ReleaseAllTicketsResponse
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_api_backend_proto_init() }
func file_api_backend_proto_init() {
	if File_api_backend_proto != nil {
		return
	}
	file_api_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_backend_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_backend_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchMatchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_backend_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchMatchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_backend_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseTicketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_backend_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseTicketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_backend_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseAllTicketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_backend_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseAllTicketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_backend_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignmentGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_backend_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignmentFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_backend_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignTicketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_backend_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignTicketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_backend_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_backend_proto_goTypes,
		DependencyIndexes: file_api_backend_proto_depIdxs,
		EnumInfos:         file_api_backend_proto_enumTypes,
		MessageInfos:      file_api_backend_proto_msgTypes,
	}.Build()
	File_api_backend_proto = out.File
	file_api_backend_proto_rawDesc = nil
	file_api_backend_proto_goTypes = nil
	file_api_backend_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BackendServiceClient is the client API for BackendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BackendServiceClient interface {
	// FetchMatches triggers a MatchFunction with the specified MatchProfile and
	// returns a set of matches generated by the Match Making Function, and
	// accepted by the evaluator.
	// Tickets in matches returned by FetchMatches are moved from active to
	// pending, and will not be returned by query.
	FetchMatches(ctx context.Context, in *FetchMatchesRequest, opts ...grpc.CallOption) (BackendService_FetchMatchesClient, error)
	// AssignTickets overwrites the Assignment field of the input TicketIds.
	AssignTickets(ctx context.Context, in *AssignTicketsRequest, opts ...grpc.CallOption) (*AssignTicketsResponse, error)
	// ReleaseTickets moves tickets from the pending state, to the active state.
	// This enables them to be returned by query, and find different matches.
	// BETA FEATURE WARNING:  This call and the associated Request and Response
	// messages are not finalized and still subject to possible change or removal.
	ReleaseTickets(ctx context.Context, in *ReleaseTicketsRequest, opts ...grpc.CallOption) (*ReleaseTicketsResponse, error)
	// ReleaseAllTickets moves all tickets from the pending state, to the active
	// state. This enables them to be returned by query, and find different
	// matches.
	// BETA FEATURE WARNING:  This call and the associated Request and Response
	// messages are not finalized and still subject to possible change or removal.
	ReleaseAllTickets(ctx context.Context, in *ReleaseAllTicketsRequest, opts ...grpc.CallOption) (*ReleaseAllTicketsResponse, error)
}

type backendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendServiceClient(cc grpc.ClientConnInterface) BackendServiceClient {
	return &backendServiceClient{cc}
}

func (c *backendServiceClient) FetchMatches(ctx context.Context, in *FetchMatchesRequest, opts ...grpc.CallOption) (BackendService_FetchMatchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BackendService_serviceDesc.Streams[0], "/openmatch.BackendService/FetchMatches", opts...)
	if err != nil {
		return nil, err
	}
	x := &backendServiceFetchMatchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BackendService_FetchMatchesClient interface {
	Recv() (*FetchMatchesResponse, error)
	grpc.ClientStream
}

type backendServiceFetchMatchesClient struct {
	grpc.ClientStream
}

func (x *backendServiceFetchMatchesClient) Recv() (*FetchMatchesResponse, error) {
	m := new(FetchMatchesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *backendServiceClient) AssignTickets(ctx context.Context, in *AssignTicketsRequest, opts ...grpc.CallOption) (*AssignTicketsResponse, error) {
	out := new(AssignTicketsResponse)
	err := c.cc.Invoke(ctx, "/openmatch.BackendService/AssignTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) ReleaseTickets(ctx context.Context, in *ReleaseTicketsRequest, opts ...grpc.CallOption) (*ReleaseTicketsResponse, error) {
	out := new(ReleaseTicketsResponse)
	err := c.cc.Invoke(ctx, "/openmatch.BackendService/ReleaseTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) ReleaseAllTickets(ctx context.Context, in *ReleaseAllTicketsRequest, opts ...grpc.CallOption) (*ReleaseAllTicketsResponse, error) {
	out := new(ReleaseAllTicketsResponse)
	err := c.cc.Invoke(ctx, "/openmatch.BackendService/ReleaseAllTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendServiceServer is the server API for BackendService service.
type BackendServiceServer interface {
	// FetchMatches triggers a MatchFunction with the specified MatchProfile and
	// returns a set of matches generated by the Match Making Function, and
	// accepted by the evaluator.
	// Tickets in matches returned by FetchMatches are moved from active to
	// pending, and will not be returned by query.
	FetchMatches(*FetchMatchesRequest, BackendService_FetchMatchesServer) error
	// AssignTickets overwrites the Assignment field of the input TicketIds.
	AssignTickets(context.Context, *AssignTicketsRequest) (*AssignTicketsResponse, error)
	// ReleaseTickets moves tickets from the pending state, to the active state.
	// This enables them to be returned by query, and find different matches.
	// BETA FEATURE WARNING:  This call and the associated Request and Response
	// messages are not finalized and still subject to possible change or removal.
	ReleaseTickets(context.Context, *ReleaseTicketsRequest) (*ReleaseTicketsResponse, error)
	// ReleaseAllTickets moves all tickets from the pending state, to the active
	// state. This enables them to be returned by query, and find different
	// matches.
	// BETA FEATURE WARNING:  This call and the associated Request and Response
	// messages are not finalized and still subject to possible change or removal.
	ReleaseAllTickets(context.Context, *ReleaseAllTicketsRequest) (*ReleaseAllTicketsResponse, error)
}

// UnimplementedBackendServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBackendServiceServer struct {
}

func (*UnimplementedBackendServiceServer) FetchMatches(*FetchMatchesRequest, BackendService_FetchMatchesServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchMatches not implemented")
}
func (*UnimplementedBackendServiceServer) AssignTickets(context.Context, *AssignTicketsRequest) (*AssignTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTickets not implemented")
}
func (*UnimplementedBackendServiceServer) ReleaseTickets(context.Context, *ReleaseTicketsRequest) (*ReleaseTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseTickets not implemented")
}
func (*UnimplementedBackendServiceServer) ReleaseAllTickets(context.Context, *ReleaseAllTicketsRequest) (*ReleaseAllTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseAllTickets not implemented")
}

func RegisterBackendServiceServer(s *grpc.Server, srv BackendServiceServer) {
	s.RegisterService(&_BackendService_serviceDesc, srv)
}

func _BackendService_FetchMatches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchMatchesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BackendServiceServer).FetchMatches(m, &backendServiceFetchMatchesServer{stream})
}

type BackendService_FetchMatchesServer interface {
	Send(*FetchMatchesResponse) error
	grpc.ServerStream
}

type backendServiceFetchMatchesServer struct {
	grpc.ServerStream
}

func (x *backendServiceFetchMatchesServer) Send(m *FetchMatchesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BackendService_AssignTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).AssignTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmatch.BackendService/AssignTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).AssignTickets(ctx, req.(*AssignTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_ReleaseTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).ReleaseTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmatch.BackendService/ReleaseTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).ReleaseTickets(ctx, req.(*ReleaseTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_ReleaseAllTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseAllTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).ReleaseAllTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmatch.BackendService/ReleaseAllTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).ReleaseAllTickets(ctx, req.(*ReleaseAllTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BackendService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openmatch.BackendService",
	HandlerType: (*BackendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignTickets",
			Handler:    _BackendService_AssignTickets_Handler,
		},
		{
			MethodName: "ReleaseTickets",
			Handler:    _BackendService_ReleaseTickets_Handler,
		},
		{
			MethodName: "ReleaseAllTickets",
			Handler:    _BackendService_ReleaseAllTickets_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchMatches",
			Handler:       _BackendService_FetchMatches_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/backend.proto",
}
